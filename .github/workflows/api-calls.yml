name: API Calls to FastAPI - HÃ­brido

on:
  workflow_dispatch:
    inputs:
      # Lista de endpoints separados por coma (opcional)
      endpoint_list:
        description: "Lista de endpoints separados por coma (ej: /api/horario,/api/home)"
        required: false
        default: ""
        type: string

      # Endpoint Ãºnico (opcional, sobrescribe choice si no hay lista)
      endpoint_custom:
        description: "Endpoint Ãºnico (ej: /api/one-piece/3)"
        required: false
        default: ""
        type: string

      # Endpoint comÃºn (solo se usa si no hay lista ni custom)
      endpoint_choice:
        description: "Selecciona un endpoint comÃºn"
        required: false
        default: "/api/horario"
        type: choice
        options:
          - /api/horario
          - /api/animes
          - /api/home
          - /api/filters

      # Filtros para /api/animes
      genre:
        description: "GÃ©neros separados por coma (ej: accion,drama)"
        required: false
        default: ""
        type: string
      category:
        description: "CategorÃ­as separadas por coma (ej: shonen,shojo)"
        required: false
        default: ""
        type: string
      min_year:
        description: "AÃ±o mÃ­nimo"
        required: false
        default: ""
        type: string
      max_year:
        description: "AÃ±o mÃ¡ximo"
        required: false
        default: ""
        type: string
      status:
        description: "Estado del anime (ej: emision, finalizado)"
        required: false
        default: ""
        type: string
      order:
        description: "Orden (ej: predeterminado, alfabetico)"
        required: false
        default: "predeterminado"
        type: string
      letter:
        description: "Letra inicial"
        required: false
        default: ""
        type: string
      page:
        description: "NÃºmero de pÃ¡gina"
        required: false
        default: "1"
        type: string

jobs:
  call-api:
    runs-on: ubuntu-latest
    steps:
      - name: Determinar endpoints a ejecutar
        id: set-endpoints
        run: |
          if [ -n "${{ github.event.inputs.endpoint_list }}" ]; then
            echo "endpoints=${{ github.event.inputs.endpoint_list }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ github.event.inputs.endpoint_custom }}" ]; then
            echo "endpoints=${{ github.event.inputs.endpoint_custom }}" >> $GITHUB_OUTPUT
          else
            echo "endpoints=${{ github.event.inputs.endpoint_choice }}" >> $GITHUB_OUTPUT
          fi

      - name: Ejecutar endpoints
        run: |
          BASE_URL="https://e6f4992833b0.ngrok-free.app"
          echo "Endpoints a procesar: ${{ steps.set-endpoints.outputs.endpoints }}"
          IFS=',' read -ra ENDPOINTS <<< "${{ steps.set-endpoints.outputs.endpoints }}"

          mkdir -p responses

          # Asignar valores de inputs a variables de Bash
          MIN_YEAR="${{ github.event.inputs.min_year }}"
          MAX_YEAR="${{ github.event.inputs.max_year }}"
          STATUS="${{ github.event.inputs.status }}"
          ORDER="${{ github.event.inputs.order }}"
          LETTER="${{ github.event.inputs.letter }}"
          PAGE="${{ github.event.inputs.page }}"

          for ep in "${ENDPOINTS[@]}"; do
            ep_trimmed=$(echo "$ep" | xargs)
            
            # Si es /api/animes, agregar filtros dinÃ¡micos
            if [[ "$ep_trimmed" == "/api/animes" ]]; then
              QUERY="?"
              if [ -n "${{ github.event.inputs.genre }}" ]; then
                IFS=',' read -ra GENRES <<< "${{ github.event.inputs.genre }}"
                for g in "${GENRES[@]}"; do QUERY="${QUERY}genre=${g}&"; done
              fi
              if [ -n "${{ github.event.inputs.category }}" ]; then
                IFS=',' read -ra CATEGORIES <<< "${{ github.event.inputs.category }}"
                for c in "${CATEGORIES[@]}"; do QUERY="${QUERY}category=${c}&"; done
              fi
              # Agregar parÃ¡metros dinÃ¡micos usando variables de Bash
              [ -n "$MIN_YEAR" ] && QUERY="${QUERY}min_year=${MIN_YEAR}&"
              [ -n "$MAX_YEAR" ] && QUERY="${QUERY}max_year=${MAX_YEAR}&"
              [ -n "$STATUS" ] && QUERY="${QUERY}status=${STATUS}&"
              [ -n "$ORDER" ] && QUERY="${QUERY}order=${ORDER}&"
              [ -n "$LETTER" ] && QUERY="${QUERY}letter=${LETTER}&"
              [ -n "$PAGE" ] && QUERY="${QUERY}page=${PAGE}&"
              QUERY="${QUERY%&}"
              FULL_URL="$BASE_URL$ep_trimmed$QUERY"
            else
              FULL_URL="$BASE_URL$ep_trimmed"
            fi

            # Generar nombre de archivo seguro
            outfile="responses/$(echo "$ep_trimmed" | tr '/' '_' | tr -s '_' | sed 's/[^a-zA-Z0-9_-]//g').json"
            echo "ðŸ”— Llamando a: $FULL_URL"
            curl -s "$FULL_URL" -H "accept: application/json" -o "$outfile" || echo "{}" > "$outfile"

            echo "ðŸ“„ Respuesta de $ep_trimmed:"
            cat "$outfile" | jq '.' || cat "$outfile"
          done

      - name: Subir todas las respuestas como artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-responses
          path: responses/
