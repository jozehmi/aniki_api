name: API Calls to FastAPI - HÃ­brido

on:
  workflow_dispatch:
    inputs:
      # Lista de endpoints separados por coma (opcional)
      endpoint_list:
        description: "Lista de endpoints separados por coma (ej: /api/horario,/api/home)"
        required: false
        default: ""
        type: string

      # Endpoint Ãºnico (opcional, sobrescribe choice si no hay lista)
      endpoint_custom:
        description: "Endpoint Ãºnico (ej: /api/one-piece/3)"
        required: false
        default: ""
        type: string

      # Endpoint comÃºn (solo se usa si no hay lista ni custom)
      endpoint_choice:
        description: "Selecciona un endpoint comÃºn"
        required: false
        default: "/api/horario"
        type: choice
        options:
          - /api/horario
          - /api/animes
          - /api/animes/home
          - /api/filters

      # Filtros combinados para /api/animes (opcional)
      animes_filters:
        description: "Filtros para /api/animes en formato clave=valor separados por ; (ej: genre=accion,drama;category=shonen;min_year=2000;page=2)"
        required: false
        default: ""
        type: string

jobs:
  call-api:
    runs-on: ubuntu-latest
    steps:
      - name: Determinar endpoints a ejecutar
        id: set-endpoints
        run: |
          if [ -n "${{ github.event.inputs.endpoint_list }}" ]; then
            echo "endpoints=${{ github.event.inputs.endpoint_list }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ github.event.inputs.endpoint_custom }}" ]; then
            echo "endpoints=${{ github.event.inputs.endpoint_custom }}" >> $GITHUB_OUTPUT
          else
            echo "endpoints=${{ github.event.inputs.endpoint_choice }}" >> $GITHUB_OUTPUT
          fi

      - name: Ejecutar endpoints
        run: |
          BASE_URL="https://e6f4992833b0.ngrok-free.app"
          echo "Endpoints a procesar: ${{ steps.set-endpoints.outputs.endpoints }}"
          IFS=',' read -ra ENDPOINTS <<< "${{ steps.set-endpoints.outputs.endpoints }}"

          mkdir -p responses

          for ep in "${ENDPOINTS[@]}"; do
            ep_trimmed=$(echo "$ep" | xargs)
            
            # Si es /api/animes, agregar filtros dinÃ¡micos
            if [[ "$ep_trimmed" == "/api/animes" ]]; then
              QUERY="?"
              
              # Parsear animes_filters
              ANIMES_FILTERS="${{ github.event.inputs.animes_filters }}"
              declare -A filters
              if [ -n "$ANIMES_FILTERS" ]; then
                IFS=';' read -ra FILTER_PAIRS <<< "$ANIMES_FILTERS"
                for pair in "${FILTER_PAIRS[@]}"; do
                  key=$(echo "$pair" | cut -d'=' -f1 | xargs)
                  value=$(echo "$pair" | cut -d'=' -f2- | xargs)
                  filters["$key"]="$value"
                done
              fi
              
              # Agregar genre si existe
              if [ -n "${filters[genre]}" ]; then
                IFS=',' read -ra GENRES <<< "${filters[genre]}"
                for g in "${GENRES[@]}"; do QUERY="${QUERY}genre=${g}&"; done
              fi
              
              # Agregar category si existe
              if [ -n "${filters[category]}" ]; then
                IFS=',' read -ra CATEGORIES <<< "${filters[category]}"
                for c in "${CATEGORIES[@]}"; do QUERY="${QUERY}category=${c}&"; done
              fi
              
              # Agregar otros parÃ¡metros con defaults si no se proporcionan
              min_year="${filters[min_year]:-}"
              [ -n "$min_year" ] && QUERY="${QUERY}min_year=${min_year}&"
              
              max_year="${filters[max_year]:-}"
              [ -n "$max_year" ] && QUERY="${QUERY}max_year=${max_year}&"
              
              status="${filters[status]:-}"
              [ -n "$status" ] && QUERY="${QUERY}status=${status}&"
              
              order="${filters[order]:-predeterminado}"
              [ -n "$order" ] && QUERY="${QUERY}order=${order}&"
              
              letter="${filters[letter]:-}"
              [ -n "$letter" ] && QUERY="${QUERY}letter=${letter}&"
              
              page="${filters[page]:-1}"
              [ -n "$page" ] && QUERY="${QUERY}page=${page}&"
              
              QUERY="${QUERY%&}"
              FULL_URL="$BASE_URL$ep_trimmed$QUERY"
            else
              FULL_URL="$BASE_URL$ep_trimmed"
            fi

            # Generar nombre de archivo seguro
            outfile="responses/$(echo "$ep_trimmed" | tr '/' '_' | tr -s '_' | sed 's/[^a-zA-Z0-9_-]//g').json"
            echo "ðŸ”— Llamando a: $FULL_URL"
            curl -s "$FULL_URL" -H "accept: application/json" -o "$outfile" || echo "{}" > "$outfile"

            echo "ðŸ“„ Respuesta de $ep_trimmed:"
            cat "$outfile" | jq '.' || cat "$outfile"
          done

      - name: Subir todas las respuestas como artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-responses
          path: responses/
